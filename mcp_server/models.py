# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:12:05+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, EmailStr, Field, RootModel


class ErrorField(BaseModel):
    code: str = Field(
        ...,
        description='Short identifier for the error, suitable for indicating the specific error within client code',
    )
    message: Optional[str] = Field(
        None,
        description='Human-readable, English description of the problem with the contents of the field',
    )
    path: str = Field(
        ...,
        description="<ul>\n<li style='margin-left: 12px;'>JSONPath referring to a field containing an error</li>\n<strong style='margin-left: 12px;'>OR</strong>\n<li style='margin-left: 12px;'>JSONPath referring to a field that refers to an object containing an error, with more detail in `pathRelated`</li>\n</ul>",
    )
    pathRelated: Optional[str] = Field(
        None,
        description='JSONPath referring to a field containing an error, which is referenced by `path`',
    )


class ErrorLimit(BaseModel):
    code: str = Field(
        ...,
        description='Short identifier for the error, suitable for indicating the specific error within client code',
    )
    fields: Optional[List[ErrorField]] = Field(
        None,
        description='List of the specific fields, and the errors found with their contents',
    )
    message: Optional[str] = Field(
        None, description='Human-readable, English description of the error'
    )
    retryAfterSec: int = Field(
        ..., description='Number of seconds to wait before attempting a similar request'
    )


class Code(Enum):
    PW_BLACK_LIST = 'PW_BLACK_LIST'
    PW_TOO_SHORT = 'PW_TOO_SHORT'
    PW_TOO_LONG = 'PW_TOO_LONG'
    PW_MISSING_UC = 'PW_MISSING_UC'
    PW_MISSING_NUM = 'PW_MISSING_NUM'
    PW_RECENTLY_USED = 'PW_RECENTLY_USED'
    PW_NOT_UNIQUE = 'PW_NOT_UNIQUE'


class PasswordError(BaseModel):
    code: Optional[Code] = Field(
        None,
        description='Short identifier for the error, suitable for indicating the specific error within client code',
    )
    message: Optional[str] = Field(
        None, description='Human-readable, English description of the error'
    )
    type: Optional[str] = Field(None, description="Response type, always 'error'")


class Secret(BaseModel):
    secret: Optional[str] = Field(
        None,
        description="The secret value used to set a subaccount's password",
        examples=['P@55w0rd+'],
    )


class Shopper(BaseModel):
    customerId: Optional[str] = Field(
        None,
        description='Identifier for the Customer record associated with this Shopper record. This is an alternate identifier that some systems use to identify an individual shopper record',
    )
    email: EmailStr
    externalId: Optional[int] = None
    marketId: str
    nameFirst: str
    nameLast: str
    shopperId: str


class ShopperId(BaseModel):
    customerId: Optional[str] = Field(
        None,
        description='Identifier for the Customer record associated with this Shopper record. This is an alternate identifier that some systems use to identify an individual shopper record',
    )
    shopperId: str


class BillingState(Enum):
    ABANDONED = 'ABANDONED'
    INACTIVE = 'INACTIVE'
    ACTIVE = 'ACTIVE'


class ShopperStatus(BaseModel):
    billingState: Optional[BillingState] = Field(
        None,
        description='Indicates the billing state of the Shopper.<br />ABANDONED: The shopper has not been billed in at least 10 years and has no active subscriptions.<br />INACTIVE: The shopper has been billed within the last 10 years but has no active subscriptions.<br />ACTIVE: The shopper has at least one active subscription.',
    )


class MarketId(Enum):
    da_DK = 'da-DK'
    de_AT = 'de-AT'
    de_CH = 'de-CH'
    de_DE = 'de-DE'
    el_GR = 'el-GR'
    en_AE = 'en-AE'
    en_AU = 'en-AU'
    en_CA = 'en-CA'
    en_GB = 'en-GB'
    en_HK = 'en-HK'
    en_IE = 'en-IE'
    en_IL = 'en-IL'
    en_IN = 'en-IN'
    en_MY = 'en-MY'
    en_NZ = 'en-NZ'
    en_PH = 'en-PH'
    en_PK = 'en-PK'
    en_SG = 'en-SG'
    en_US = 'en-US'
    en_ZA = 'en-ZA'
    es_AR = 'es-AR'
    es_CL = 'es-CL'
    es_CO = 'es-CO'
    es_ES = 'es-ES'
    es_MX = 'es-MX'
    es_PE = 'es-PE'
    es_US = 'es-US'
    es_VE = 'es-VE'
    fi_FI = 'fi-FI'
    fr_BE = 'fr-BE'
    fr_CA = 'fr-CA'
    fr_CH = 'fr-CH'
    fr_FR = 'fr-FR'
    hi_IN = 'hi-IN'
    id_ID = 'id-ID'
    it_CH = 'it-CH'
    it_IT = 'it-IT'
    ja_JP = 'ja-JP'
    ko_KR = 'ko-KR'
    mr_IN = 'mr-IN'
    nb_NO = 'nb-NO'
    nl_BE = 'nl-BE'
    nl_NL = 'nl-NL'
    pl_PL = 'pl-PL'
    pt_BR = 'pt-BR'
    pt_PT = 'pt-PT'
    ru_RU = 'ru-RU'
    sv_SE = 'sv-SE'
    ta_IN = 'ta-IN'
    th_TH = 'th-TH'
    tr_TR = 'tr-TR'
    uk_UA = 'uk-UA'
    vi_VN = 'vi-VN'
    zh_HK = 'zh-HK'
    zh_SG = 'zh-SG'
    zh_TW = 'zh-TW'


class ShopperUpdate(BaseModel):
    email: Optional[EmailStr] = None
    externalId: Optional[int] = None
    marketId: Optional[MarketId] = None
    nameFirst: Optional[str] = None
    nameLast: Optional[str] = None


class SubaccountCreate(BaseModel):
    email: EmailStr
    externalId: Optional[int] = None
    marketId: Optional[MarketId] = 'en-US'
    nameFirst: str
    nameLast: str
    password: str


class Include(Enum):
    customerId = 'customerId'


class Includes(RootModel[List[Include]]):
    root: List[Include]


class Error(BaseModel):
    code: str = Field(
        ...,
        description='Short identifier for the error, suitable for indicating the specific error within client code',
    )
    fields: Optional[List[ErrorField]] = Field(
        None,
        description='List of the specific fields, and the errors found with their contents',
    )
    message: Optional[str] = Field(
        None, description='Human-readable, English description of the error'
    )
