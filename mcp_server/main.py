# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:12:05+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query
from pydantic import constr

from models import (
    Error,
    ErrorLimit,
    Includes,
    PasswordError,
    Secret,
    Shopper,
    ShopperId,
    ShopperStatus,
    ShopperUpdate,
    SubaccountCreate,
)

app = MCPProxy(
    title='',
    version='1.0.0',
    servers=[{'url': '//api.ote-godaddy.com'}],
)


@app.post('/v1/shoppers/subaccount', tags=['subaccount_operations'])
def create_subaccount(body: SubaccountCreate):
    """
    Create a Subaccount owned by the authenticated Reseller
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/shoppers/{shopperId}',
    description=""" <strong>Notes:</strong><ul><li>Shopper deletion is not supported in OTE</li><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul> """,
    tags=['shopper_profile_operations'],
)
def delete(
    shopper_id: constr(max_length=10) = Path(..., alias='shopperId'),
    audit_client_ip: str = Query(..., alias='auditClientIp'),
):
    """
    Request the deletion of a shopper profile
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/shoppers/{shopperId}',
    description=""" <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul> """,
    tags=['shopper_profile_operations'],
)
def get(
    shopper_id: str = Path(..., alias='shopperId'), includes: Optional[Includes] = None
):
    """
    Get details for the specified Shopper
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/shoppers/{shopperId}',
    description=""" <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul> """,
    tags=['shopper_profile_operations'],
)
def update(shopper_id: str = Path(..., alias='shopperId'), body: ShopperUpdate = ...):
    """
    Update details for the specified Shopper
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1/shoppers/{shopperId}/factors/password',
    description=""" <strong>Notes:</strong><ul><li>Password set is only supported by API Resellers setting subaccount passwords.</li><li>**shopperId** is **not the same** as **customerId**.  **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul> """,
    tags=['subaccount_operations', 'shopper_profile_operations'],
)
def change_password(shopper_id: str = Path(..., alias='shopperId'), body: Secret = ...):
    """
    Set subaccount's password
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/shoppers/{shopperId}/status',
    description=""" <strong>Notes:</strong><ul><li>**shopperId** is **not the same** as **customerId**. **shopperId** is a number of max length 10 digits (*ex:* 1234567890) whereas **customerId** is a UUIDv4 (*ex:* 295e3bc3-b3b9-4d95-aae5-ede41a994d13)</li></ul> """,
    tags=['shopper_profile_operations'],
)
def get_status(
    shopper_id: constr(max_length=10) = Path(..., alias='shopperId'),
    audit_client_ip: str = Query(..., alias='auditClientIp'),
):
    """
    Get details for the specified Shopper
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
